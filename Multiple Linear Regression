
import pandas as pd
CAhousing_MLR_df=pd.read_csv(r'C:\Users\morva\Documents\Python Scripts\Github Housing\California Housing.csv')
CAhousing_MLR_df=pd.read_csv(r'C:\Users\morva\Documents\Python Scripts\Github Housing\California Housing.csv')
CAhousing_MLR_df
CAhousing_MLR_df
longitude	latitude	housing_median_age	total_rooms	total_bedrooms	population	households	median_income	median_house_value	ocean_proximity
0	-122.23	37.88	41.0	880.0	129.0	322.0	126.0	8.3252	452600.0	NEAR BAY
1	-122.22	37.86	21.0	7099.0	1106.0	2401.0	1138.0	8.3014	358500.0	NEAR BAY
2	-122.24	37.85	52.0	1467.0	190.0	496.0	177.0	7.2574	352100.0	NEAR BAY
3	-122.25	37.85	52.0	1274.0	235.0	558.0	219.0	5.6431	341300.0	NEAR BAY
4	-122.25	37.85	52.0	1627.0	280.0	565.0	259.0	3.8462	342200.0	NEAR BAY
...	...	...	...	...	...	...	...	...	...	...
20635	-121.09	39.48	25.0	1665.0	374.0	845.0	330.0	1.5603	78100.0	INLAND
20636	-121.21	39.49	18.0	697.0	150.0	356.0	114.0	2.5568	77100.0	INLAND
20637	-121.22	39.43	17.0	2254.0	485.0	1007.0	433.0	1.7000	92300.0	INLAND
20638	-121.32	39.43	18.0	1860.0	409.0	741.0	349.0	1.8672	84700.0	INLAND
20639	-121.24	39.37	16.0	2785.0	616.0	1387.0	530.0	2.3886	89400.0	INLAND
20640 rows Ã— 10 columns

CAhousing_MLR_df
CAhousing_MLR_df.columns
#Index(['longitude', 'latitude', 'housing_median_age', 'total_rooms',
       'total_bedrooms', 'population', 'households', 'median_income',
       'median_house_value', 'ocean_proximity'],
      dtype='object')
predictors=['longitude', 'latitude', 'housing_median_age', 'total_rooms','total_bedrooms', 'population', 'households', 'median_income', 'ocean_proximity']
outcome='median_house_value'
outcome='median_house_value'
ReducedCAMLRhousing_df
ReducedCAMLRhousing_df=CAhousing_MLR_df.dropna()
CAhousing_MLR_df
x=pd.get_dummies(ReducedCAMLRhousing_df[predictors],drop_first=True)
CAhousing_MLR_df
y=ReducedCAMLRhousing_df[outcome]
from sklearn.model_selection import train_test_split

from sklearn.model_selection import train_test_split

train_x,valid_x,train_y,valid_y=train_test_split(x,y,test_size=.4,random_state=1)
from sklearn.linear_model import LinearRegression

ReducedCAMLRhousing=LinearRegression()
ReducedCAMLRhousing.fit(train_x,train_y)
#LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)

from dmba import regressionSummary
print(pd.DataFrame({'PredictorS': x.columns, 'coefficient': ReducedCAMLRhousing.coef_}))
regressionSummary(train_y, ReducedCAMLRhousing.predict(train_x))
#                    PredictorS    coefficient
0                    longitude  -26896.190119
1                     latitude  -25542.595847
2           housing_median_age    1083.855760
3                  total_rooms      -5.900478
4               total_bedrooms      98.498075
5                   population     -36.519951
6                   households      46.901000
7                median_income   39167.464618
8       ocean_proximity_INLAND  -38757.517109
9       ocean_proximity_ISLAND  102359.629322
10    ocean_proximity_NEAR BAY   -3720.278003
11  ocean_proximity_NEAR OCEAN    5191.746121

Regression statistics (TRAIN)

                      Mean Error (ME) : 0.0000
       Root Mean Squared Error (RMSE) : 68454.1925
            Mean Absolute Error (MAE) : 49633.3645
          Mean Percentage Error (MPE) : -10.3553
Mean Absolute Percentage Error (MAPE) : 28.7033

#COMPARE THIS RESULTS WITH THE RESULT FROM LINEAR REGRESSION ON THE SAME DATA
    Regression statistics (TRAIN)

                      Mean Error (ME) : 0.0000
       Root Mean Squared Error (RMSE) : 68454.1925
            Mean Absolute Error (MAE) : 49633.3645
          Mean Percentage Error (MPE) : -10.3553
Mean Absolute Percentage Error (MAPE) : 28.7033


# We use predict() to make predictions on our new set
ReducedCAMLRhousing_pred = ReducedCAMLRhousing.predict(valid_x)

result = pd.DataFrame({'Predicted': ReducedCAMLRhousing_pred, 'Actual': valid_y,
                       'Residual': valid_y - ReducedCAMLRhousing_pred})
print(result.head(20))

# print performance measures (validation data)
regressionSummary(valid_y, ReducedCAMLRhousing_pred)
#      Predicted    Actual       Residual
6715   381575.901392  360900.0  -20675.901392
4121   280442.284083  291500.0   11057.715917
15433  156189.944973  131300.0  -24889.944973
20272  355450.644766  500001.0  144550.355234
11843   56148.758536  118800.0   62651.241464
1398   244849.173528  189600.0  -55249.173528
1838   184466.791567  162500.0  -21966.791567
1902    91645.429342  134700.0   43054.570658
18586  230670.955038  192200.0  -38470.955038
11765  138214.523983  179400.0   41185.476017
4220   591468.553213  500001.0  -91467.553213
16866  247686.226118  318400.0   70713.773882
5499   230631.340127  287500.0   56868.659873
13731  138922.741932  137000.0   -1922.741932
15204  333747.182007  327900.0   -5847.182007
14671  293829.496665  288200.0   -5629.496665
18479  285011.055892  300800.0   15788.944108
10174  211819.332197  169200.0  -42619.332197
3806   163805.809463  195600.0   31794.190537
1302   181264.098438  133400.0  -47864.098438

Regression statistics

                      Mean Error (ME) : 935.4942
       Root Mean Squared Error (RMSE) : 68932.5443
            Mean Absolute Error (MAE) : 49831.2047
          Mean Percentage Error (MPE) : -9.8600
Mean Absolute Percentage Error (MAPE) : 28.4619

#COMPARE THIS RESULTS WITH THE RESULT FROM LINEAR REGRESSION ON THE SAME DATA
Regression statistics

                      Mean Error (ME) : 935.4942
       Root Mean Squared Error (RMSE) : 68932.5443
            Mean Absolute Error (MAE) : 49831.2047
          Mean Percentage Error (MPE) : -9.8600
Mean Absolute Percentage Error (MAPE) : 28.4619

import matplotlib.pylab as plt
import pandas as pd
import numpy as np
import matplotlib
matplotlib.use('TkAgg')

plt.show()
